package edu.wpi.first.smartdashboard.gui.layout;

import java.awt.Point;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

/**
 * Manages layout of DisplayElements on the GUI.
 * 
 * @author pmalmsten
 */
public class LayoutManager {
    /**
     * Represents an allocation of space on the GUI.
     */
    public static class LayoutAllocation {
        private final Set<Region> memberRegions;
        public final Point point;
        public final int width;
        public final int height;

        public LayoutAllocation(Point point, 
                                int width,
                                int height,
                                Set<Region> members) {
            this.point = point;
            this.memberRegions = members;
            this.width = width;
            this.height = height;
        }

        /**
         * Invalidates this allocation and returns the space it occupied back
         * into the free space pool.
         */
        public void deallocate() {
            LayoutManager.deallocate(memberRegions);
        }
    };

    static Set<Region> freeSpace = new HashSet<Region>();
    private static int m_width;
    private static int m_height;

    private static Comparator<Region> regionsByDistanceToUpperLeft = new Comparator<Region>() {
        public int compare(Region r1, Region r2) {
            return (r1.upperLeft.x + r1.upperLeft.y) - (r2.upperLeft.x + r2.upperLeft.y);
        }
    };

    /**
     * Initializes the LayoutManager by declaring the original height and width
     * of the GUI space it manages.
     *
     * @param width
     * @param height
     */
    public static synchronized void init(int regionSize, int width, int height) {
        Region.init(regionSize, freeSpace);

        for(int i = 0; i < width; i += regionSize) {
            for(int j = 0; j < height; j += regionSize) {
                freeSpace.add(new Region(new Point(i, j)));
            }
        }
    }

    /**
     * Request an exclusive GUI space allocation of the given width and height.
     *
     * @param width The requested allocation width.
     * @param height The requested allocation height.
     * @return A LayoutAllocation result. Null if the request could not be satisfied.
     */
    public static synchronized LayoutAllocation allocate(int width, int height) {
        return allocate(null, width, height);
    }

    /**
     * Request an exclusive GUI space allocation of the given width and height
     * at the given point.
     *
     * @param point A point which the result allocation must be located.
     * @param width The requested allocation height.
     * @param height The requested allocation width.
     * @return A LayoutAllocation result. Null if the request could not be satisfied.
     */
    public static synchronized LayoutAllocation allocate(Point loc, int width, int height) {
        List<Region> searchList;

        if(loc == null)
            searchList = new LinkedList<Region>(freeSpace);
        else {
            int regionX = (loc.x / Region.size) * Region.size;
            int regionY = (loc.y / Region.size) * Region.size;
            Region searchRegion = new Region(new Point(regionX, regionY));

            if(!freeSpace.contains(searchRegion))
                return null;

            searchList = new LinkedList<Region>();
            searchList.add(searchRegion);
        }
         
        Collections.sort(searchList, regionsByDistanceToUpperLeft);

        for(Region r : searchList) {
            Region.FreeSpaceSearchResult fssr = r.startSearch(width, height);

            if(fssr.viable) {
                freeSpace.removeAll(fssr.memberRegions);
                return new LayoutManager.LayoutAllocation(r.upperLeft,
                                                          width,
                                                          height,
                                                          fssr.memberRegions);
            }
        }

        return null;
    }

    public static synchronized LayoutAllocation moveAllocation(LayoutAllocation la, Point newPoint) {
        int oldWidth = la.width;
        int oldHeight = la.height;
        Point oldPoint = la.point;
        la.deallocate();

        LayoutAllocation newLa = allocate(newPoint, oldWidth, oldHeight);

        if(newLa != null) {
            return newLa;
        } else {
            // Move failed, try to re-acquire old allocation
            newLa = allocate(oldPoint, oldWidth, oldHeight);

            if(newLa != null)
                return newLa;
            else
                throw new RuntimeException("Critical error: unable to reclaim prior"
                                        + "layout allocation during move.");
        }
    }

    public static synchronized int restrictedHeightResize(int requested) {
        return 0;
    }

    public static synchronized int restrictedWidthResize(int requested) {
        return 0;
    }

    private static synchronized void deallocate(Set<Region> members) {
        freeSpace.addAll(members);
    }
}
